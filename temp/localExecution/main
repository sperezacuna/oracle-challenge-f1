import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, Dataset
from PIL import Image

"""
--------------------------------------------------------------------------------
                                    CONFIG
--------------------------------------------------------------------------------
"""

num_epochs = 10

"""
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
"""

# Definition of the dataset class
class FoodDataset(Dataset):
    
    def __init__(self, data, transform=None):
        self.data = data
        self.transform = transform
        
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, index):
        path = self.data.iloc[index, 1]
        label = self.data.iloc[index, 2]
        img = Image.open(path).convert('RGB')
        
        if self.transform is not None:
            img = self.transform(img)
        
        return img, label

# Load the csv files
print ("#Loading CSV values")
train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')
print ("!CSV values loaded successfully")

# Image transformations
print ("#Transforming images")
train_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

test_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])
print ("!Images transformed successfully")

# Datasets creation
train_dataset = FoodDataset(train_df, transform=train_transforms)
test_dataset = FoodDataset(test_df, transform=test_transforms)

# Dataloaders creation
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Download pre-trained model
model = torchvision.models.resnet18(pretrained=True)
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 10)

# Train the model
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print("-------------> Using device: ",device)
model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
total_step = len(train_loader)

print ("#Beginning training")
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        if (i+1) % 100 == 0:
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{total_step}], Loss: {loss.item():.4f}')
print ("!Model trained successfully")

# Evaluate the model
print ("#Evaluating model")
model.eval()
results = {}
test_paths = {}
for i in range(len(test_df)):
    idx = test_df.iloc[i]['idx_test']
    path = test_df.iloc[i]['path_img']
    test_paths[idx] = path

with torch.no_grad():
    for idx, path in test_paths.items():
        img = Image.open(path).convert('RGB')
        img_tensor = test_transforms(img).unsqueeze(0)
        img_tensor = img_tensor.to(device)
        output = model(img_tensor)
        _, predicted = torch.max(output.data, 1)
        results[idx] = predicted.item()
        
print ("!Evaluation completed")
print(results)
with open('out.txt', 'w') as f:
    f.write(results)
